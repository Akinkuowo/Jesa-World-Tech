// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]

  courseLevel Level?  @relation(fields: [levelId], references: [id])
  levelId     String?

  payments Payment[] @relation("CourseToPayment") // Updated relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([levelId])
  Enroll Enroll[] @relation("CourseToPayment")
}

model Payment {
  id            String @id @default(uuid())
  userId        String?
  courseLevelId String
  courseLevel   Level  @relation(fields: [courseLevelId], references: [id], onDelete: Cascade)

  courseId String // Add this field
  course   Course @relation("CourseToPayment", fields: [courseId], references: [id], onDelete: Cascade) // Add this relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enroll {
  id            String @id @default(uuid())
  userId        String
  courseLevelId String
  courseLevel   Level  @relation(fields: [courseLevelId], references: [id], onDelete: Cascade)
  
  courseId      String
  course        Course @relation("CourseToPayment", fields: [courseId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, courseId]) // Ensure unique combination of userId and courseId
}


model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Subscription {
  id            String  @id @default(uuid())
  userId        String?
  courseLevelId String
  courseLevel   Level   @relation(fields: [courseLevelId], references: [id])
  
  validUntil    DateTime // Expiration date of the subscription
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@unique([userId, courseLevelId])
  @@index([userId])
}


model Level {
  id            String         @id @default(uuid())
  name          String         @unique
  courses       Course[]
  subscriptions Subscription[]
  payments      Payment[]

  @@index([name])
  @@index([id])
  Enroll Enroll[]
}

model Attachment {
  id       String @id @default(uuid())
  name     String
  url      String
  courseId String

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id        String  @id @default(uuid())
  assetId   String
  playackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chapterId, userId])
  @@index([chapterId])
}

model PaystackCustomer {
  id                 String @id @default(uuid())
  userId             String @unique
  paystackCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
